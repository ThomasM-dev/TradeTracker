import { createSlice } from "@reduxjs/toolkit";
import { DateTime } from "luxon";

// Función para guardar el estado en localStorage
const saveToLocalStorage = (state) => {
  localStorage.setItem("dailyStats", JSON.stringify(state.dailyStats));
  localStorage.setItem("monthlyStats", JSON.stringify(state.monthlyStats));
  localStorage.setItem("yearlyStats", JSON.stringify(state.yearlyStats));
  localStorage.setItem("lastSavedDate", JSON.stringify(state.lastSavedDate));
};

// Función para obtener la fecha actual
const getCurrentDate = () => {
  return DateTime.now();
};

// Función para verificar si es un nuevo día
const isNewDay = (lastSavedDate) => {
  const now = getCurrentDate();
  const lastDate = DateTime.fromISO(lastSavedDate);
  return !lastDate.hasSame(now, "day");
};

// Función para verificar si es un nuevo mes
const isNewMonth = (lastSavedDate) => {
  const now = getCurrentDate();
  const lastDate = DateTime.fromISO(lastSavedDate);
  return !lastDate.hasSame(now, "month");
};

// Estado inicial
const initialState = {
  dailyStats: JSON.parse(localStorage.getItem("dailyStats")) || [],
  monthlyStats: JSON.parse(localStorage.getItem("monthlyStats")) || [],
  yearlyStats: JSON.parse(localStorage.getItem("yearlyStats")) || [],
  lastSavedDate: JSON.parse(localStorage.getItem("lastSavedDate")) || getCurrentDate().toISO(),
};

// Slice de Redux
const statsSlice = createSlice({
  name: "stats",
  initialState,
  reducers: {
    setDailyStats: (state, action) => {
      const now = getCurrentDate();
      if (isNewDay(state.lastSavedDate)) {
        state.dailyStats = []; // Reiniciar a un array vacío si es un nuevo día
      }
      state.dailyStats = action.payload; // Reemplaza con el array completo
      state.lastSavedDate = now.toISO();
      saveToLocalStorage(state);
    },
    setMonthlyStats: (state, action) => {
      const now = getCurrentDate();
      if (isNewMonth(state.lastSavedDate)) {
        state.monthlyStats = []; // Reiniciar a un array vacío si es un nuevo mes
      }
      state.monthlyStats = action.payload; // Reemplaza con el array completo
      state.lastSavedDate = now.toISO();
      saveToLocalStorage(state);
    },
    setYearlyStats: (state, action) => {
      state.yearlyStats = action.payload; // Reemplaza con el array completo
      saveToLocalStorage(state);
    },
  },
});

export const { setDailyStats, setMonthlyStats, setYearlyStats } = statsSlice.actions;

export default statsSlice.reducer;